#!/bin/bash
# Purpose: 	The purpose of this script is to insert the java server name into the name of a java process, 
#						it searches through a file javaid.txt that is generated by a shell command on the Mediagrif Servers as submitted by them
# Deployment: PS info replacement script, rename existing psinfo psinfo_core and place this file in /opt/uptime-agent/bin
# Author: Kenneth Cheung
# Email: ken.cheung@uptimesoftware.com
# Date: 07.23.2008

#we should run the script that Mediagrif gave us to actually get the java names and id's I've now made this go to a text file javaid.txt
for fn in  /home/*/servers/*pid /home/*/tsc/.*pid; do sn=`basename $fn | sed -e \'s/^\.//;s/\.pid$//\'`; echo `cat $fn ` $sn; done > /opt/uptime-agent/tmp/javaid.txt 


#Declare arrays 
declare -a PIDARRAY 
declare -a SVRNAMEARRAY 

# Open javaid.txt that was just generated above for reading to array
exec 10</opt/uptime-agent/tmp/javaid.txt
let count=0
while read LINE <&10; do

		# assign the line to a variable
    #ARRAY[$count]=$LINE
    
    # Split the values into an array of PIDs and Server Name Strings parsed out from javaid.txt 
    PIDARRAY[$count]=${LINE%' '*}
    SVRNAMEARRAY[$count]=${LINE#*' '}
    
    ((count++))
done
# close file 
exec 10>&-

# Now lets parse through the process info and do replacements of lines where nessecary
#lets open the original psinfo data

# Get original PSINFO data and dump to output.txt
/opt/uptime-agent/bin/psinfo_core $* > /opt/uptime-agent/tmp/output.txt

# read the PS OUTPUT file for processing
exec 10</opt/uptime-agent/tmp/output.txt
let count=0

# find out how many server PIDS we will need to evaluate for each new PID in psinfo
numPIDElements=${#PIDARRAY[@]}
#echo $number_of_elements;

# while we are reading the file, let's awk out the process id for each line and quickly pattern match for any JAVA PIDS
while read LINE <&10; do
	currentPID=`echo $LINE | awk '{print $2}'` 
	#echo $currentPID;
	
	#numPIDElements=${#PIDARRAY[@]}
	#echo $number_of_elements;

	index=0
	
	#set a flag that indicates whether a PID match has occoured
	flag=0
	
	# List all the elements in the array.
	while [ "$index" -lt "$numPIDElements" ]
		do
  	
  	#check if there is a match, if so append the server name to the base process name
		if [ ${PIDARRAY[$index]} -eq $currentPID ]; then
 			echo $LINE-${SVRNAMEARRAY[$index]} 
			flag=1;	
		fi
  			let "index = $index + 1"
		done

	# if the flag is unset we don't have a java PID match, don't append the server name just pump the core info out
	if [ $flag -eq 0 ]; then
		echo $LINE
	fi 	

    ((count++))
done

# close file
exec 10>&-


